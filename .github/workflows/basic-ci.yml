name: Deebo CI

on:
  push:
    branches:
      - master
      - fix-ci-env-vars
  pull_request:
    branches:
      - master
      - fix-ci-env-vars

jobs:
  basic-test:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    env:
      NODE_ENV: development
      USE_MEMORY_BANK: "true"
      MOTHER_HOST: openrouter
      MOTHER_MODEL: anthropic/claude-3.5-sonnet
      SCENARIO_HOST: openrouter
      SCENARIO_MODEL: deepseek/deepseek-chat
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

    steps:
      - name: Checkout Deebo code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install ripgrep
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            brew install ripgrep
            echo "RIPGREP_PATH=$(which rg)" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install ripgrep
            echo "RIPGREP_PATH=$(which rg)" >> $GITHUB_ENV
          fi

      - name: Install uv
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          elif [ "$RUNNER_OS" == "Windows" ]; then
            curl.exe -LsSf https://astral.sh/uv/install.ps1 -o install.ps1
            powershell -ExecutionPolicy Bypass -File install.ps1
            echo "$USERPROFILE\.cargo\bin" >> $GITHUB_PATH
          fi

      - name: Determine tool paths
        id: tool_paths
        shell: bash
        run: |
          find_command() {
            local cmd=$1
            which "$cmd"
          }
          NPX_PATH=$(find_command npx)
          UVX_PATH=$(find_command uvx)
          NPM_BIN=$(dirname "$NPX_PATH")
          echo "DEEBO_NPX_PATH=${NPX_PATH}" >> $GITHUB_ENV
          echo "DEEBO_UVX_PATH=${UVX_PATH}" >> $GITHUB_ENV
          echo "DEEBO_NPM_BIN=${NPM_BIN}" >> $GITHUB_ENV

      - name: Install Deebo dependencies
        shell: bash
        env:
          RIPGREP_PATH: ${{ env.RIPGREP_PATH }}
          NPM_CONFIG_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "//api.github.com/:_authToken=${GITHUB_TOKEN}" >> "$USERPROFILE/.npmrc"
          else
            echo "//api.github.com/:_authToken=${GITHUB_TOKEN}" >> ~/.npmrc
          fi
          npm install --loglevel error --no-optional

      - name: Build Deebo
        run: npm run build

      - name: Build minimal MCP client
        shell: bash
        working-directory: ci/mcp-client
        env:
          RIPGREP_PATH: ${{ env.RIPGREP_PATH }}
          NPM_CONFIG_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "//api.github.com/:_authToken=${GITHUB_TOKEN}" >> "$USERPROFILE/.npmrc"
          else
            echo "//api.github.com/:_authToken=${GITHUB_TOKEN}" >> ~/.npmrc
          fi
          npm install --loglevel error --no-optional
          npm run build

      - name: Clone task manager fixture repo
        run: |
          rm -rf task-manager-fixture || true
          git clone https://github.com/snagasuri/task-manager.git task-manager-fixture

      - name: Check OpenRouter API key status
        shell: bash
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            curl.exe -fsS -G "https://openrouter.ai/api/v1/auth/key" \
              -H "Authorization: Bearer $OPENROUTER_API_KEY" \
              -o key_status.json
          else
            curl -fsS -G "https://openrouter.ai/api/v1/auth/key" \
              -H "Authorization: Bearer $OPENROUTER_API_KEY" \
              -o key_status.json
          fi
          jq -e '.data.label' key_status.json

      - name: Run Deebo server and test client (direct tool calls)
        id: deebo_run
        shell: bash
        run: |
          set -e
          DEEBO_BUILD=$(pwd)/build/index.js
          CLIENT_BUILD=$(pwd)/ci/mcp-client/build/index.js
          FIXTURE=$(pwd)/task-manager-fixture
          rm -rf memory-bank || true

          echo "Launching Deebo server..."
          node "$DEEBO_BUILD" --once &
          SERVER_PID=$!
          echo "Deebo server PID: $SERVER_PID"
          sleep 2

          echo "Running client against server..."
          node "$CLIENT_BUILD" "$DEEBO_BUILD" "$FIXTURE" | tee client_output.log
          CLIENT_EXIT=${PIPESTATUS[0]}
          if [[ $CLIENT_EXIT -ne 0 ]]; then
            echo "Client failed with code $CLIENT_EXIT"
            kill $SERVER_PID || true
            exit $CLIENT_EXIT
          fi

          echo "Stopping Deebo server..."
          if [ "$RUNNER_OS" == "Windows" ]; then
            taskkill //F //PID $SERVER_PID || true
          else
            kill $SERVER_PID || true
            wait $SERVER_PID 2>/dev/null || true
          fi

          SESSION_ID=$(grep 'FINAL_SESSION_ID_MARKER:' client_output.log | cut -d':' -f2)
          SESSION_ID=${SESSION_ID:-$(grep '✅ Started session:' client_output.log | sed 's/✅ Started session: //')}
          PROJECT_ID=$(node --experimental-specifier-resolution=node ci/get-project-id.js "$FIXTURE")

          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "SESSION_ID=$SESSION_ID" >> $GITHUB_ENV

      - name: Debug logs folder
        shell: bash
        run: |
          echo "PROJECT_ID=$PROJECT_ID SESSION_ID=$SESSION_ID"
          if [ "$RUNNER_OS" == "Windows" ]; then
            dir /s /b "memory-bank\\${PROJECT_ID}\\sessions\\${SESSION_ID}"
          else
            ls -R memory-bank/${PROJECT_ID}/sessions/${SESSION_ID}
          fi

      - name: Upload session logs
        uses: actions/upload-artifact@v4
        with:
          name: session-logs
          path: memory-bank/${{ env.PROJECT_ID }}/sessions/${{ env.SESSION_ID }}/logs
          if-no-files-found: error
          retention-days: 7
